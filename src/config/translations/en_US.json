{
  "app": {
    "title": "🔬 IdeaSearch Symbolic Regression System",
    "subtitle": "AI-powered Symbolic Regression based on Large Language Models - Support for Drawing and File Upload",
    "footer": "🔬 Powered by IdeaSearch Framework | Built with Streamlit<br>AI-powered Symbolic Regression System based on Large Language Models",
    "powered_by": "🔬 Powered by IdeaSearch Framework | Built with Streamlit"
  },
  "navigation": {
    "canvas_fitting": "🎨 Draw Curve Fitting",
    "file_fitting": "📁 Upload File Fitting"
  },
  "canvas": {
    "title": "🎨 Draw Curve Fitting",
    "description": "Draw the curve you want to fit on the canvas below",
    "drawing_mode": "Drawing Mode",
    "modes": {
      "freedraw": "Free Draw",
      "line": "Line",
      "point": "Point"
    },
    "stroke_width": "Stroke Width",
    "clear_canvas": "🗑️ Clear Canvas",
    "use_canvas_image": "📷 Pass Image",
    "use_canvas_image_help": "Pass canvas image to vision-capable models (like Gemini) to help understand fitting target. Note: Models without vision capability will ignore this option.",
    "data_extracted": "✅ Extracted {count} data points",
    "draw_instruction": "Please draw curve on canvas",
    "data_preview": "📊 Data Preview",
    "x_range": "X Range",
    "y_range": "Y Range",
    "waiting_data": "Waiting for drawing data..."
  },
  "file_upload": {
    "title": "📁 Upload File Fitting",
    "description": "Support NPZ data file upload with complete variable and unit configuration",
    "upload_data": "📤 Upload Data File",
    "select_file": "Select NPZ File",
    "file_help": "Upload NPZ file containing 'x', 'y' and optional 'error' keys",
    "error_missing_keys": "❌ NPZ file must contain 'x' and 'y' keys!",
    "error_x_dimension": "❌ Input data 'x' must be 2D array (n_samples, n_features)!",
    "error_y_dimension": "❌ Output data 'y' must be 1D array (n_samples,)!",
    "success_loaded": "✅ Successfully loaded data: {samples} samples, {features} features",
    "data_preview": "📊 Data Preview",
    "samples": "Samples",
    "features": "Features",
    "has_error": "Has Error",
    "yes": "Yes",
    "no": "No",
    "visualization": "📈 Data Visualization",
    "scatter_plot": "Data Scatter Plot",
    "data_points": "Data Points",
    "with_error": "With Error",
    "data_range": "📋 Data Range",
    "x_feature_range": "x{index} Range",
    "x_feature_mean": "x{index} Mean",
    "y_range": "y Range",
    "y_mean": "y Mean",
    "upload_instruction": "👆 Please upload NPZ data file to continue configuration"
  },
  "config": {
    "sidebar_title": "⚙️ Configuration Parameters",
    "api_config": "🔑 API Configuration",
    "api_keys_path": "API Keys File Path",
    "api_keys_help": "Specify JSON file path containing API keys",
    "select_models": "Select Models",
    "models_help": "Select one or more LLM models for fitting",
    "no_models_warning": "No available models found, please check API keys file",
    "function_config": "📐 Function Configuration",
    "available_functions": "Available Functions",
    "functions_help": "Select mathematical functions available for fitting",
    "use_constants": "Use Predefined Constants",
    "constants_help": "Allow using predefined mathematical constants (like π) in expressions",
    "fitting_params": "🎯 Fitting Parameters",
    "island_num": "Number of Islands",
    "island_help": "Number of parallel evolution populations, increase to improve diversity",
    "cycle_num": "Number of Cycles",
    "cycle_help": "Number of generations in evolutionary algorithm, more cycles usually yield better results",
    "unit_interaction_num": "Unit Interactions",
    "interaction_help": "Number of LLM calls per cycle",
    "shutdown_score": "Target Score",
    "score_help": "Automatically stop fitting when this score is reached",
    "advanced_params": "🔧 Advanced Parameters",
    "samplers_num": "Number of Samplers",
    "samplers_help": "Number of parallel sampling worker threads",
    "evaluators_num": "Number of Evaluators",
    "evaluators_help": "Number of parallel evaluation worker threads",
    "sample_temperature": "Sampling Temperature",
    "temperature_help": "Control randomness of generation, higher means more random",
    "examples_num": "Number of Examples",
    "examples_help": "Number of examples included in each prompt",
    "generate_num": "Generation Number",
    "generate_help": "Number of expressions generated per LLM call",
    "hand_over_threshold": "Handover Threshold",
    "threshold_help": "Score threshold for exchanging ideas between islands",
    "fuzzy_mode": "🧠 Fuzzy Mode",
    "enable_fuzzy": "Enable Fuzzy Mode",
    "fuzzy_help": "Use natural language theoretical descriptions as intermediate step",
    "fuzzy_translator": "Fuzzy Translator Model",
    "translator_help": "Model used to convert theoretical descriptions to expressions",
    "optimization_params": "⚡ Optimization Parameters",
    "enable_mutation": "Enable Mutation",
    "mutation_help": "Enable expression mutation operations to increase search diversity",
    "enable_crossover": "Enable Crossover",
    "crossover_help": "Enable expression crossover operations to combine different expression features",
    "optimization_method": "Optimization Method",
    "method_help": "Parameter optimization algorithm selection",
    "optimization_trial_num": "Optimization Trials",
    "trial_help": "Number of parameter optimization trials per expression, reducing can significantly improve fitting speed (recommended: 5)",
    "data_processing": "📊 Data Processing",
    "num_points": "Number of Points",
    "points_help": "Number of data points after interpolation",
    "smooth_data": "Data Smoothing",
    "smooth_help": "Apply smoothing to drawn curves",
    "interpolate_data": "Data Interpolation",
    "interpolate_help": "Interpolate data points for more uniform distribution"
  },
  "variable_config": {
    "title": "⚙️ Variable Configuration",
    "description": "Configure variable names, units, and descriptions for the fitting process to ensure generated expressions are more physically meaningful",
    "config_window": "🔧 Configuration Display Window",
    "basic_description": "📝 Basic Description",
    "input_description": "Input Description (input_description)",
    "input_desc_help": "Describe the physical meaning and purpose of input data",
    "output_variable": "🎯 Output Variable",
    "output_name": "Output Variable Name (output_name)",
    "output_name_help": "Symbol name of output variable",
    "output_description": "Output Variable Description (output_description)",
    "output_desc_help": "Physical meaning of output variable",
    "output_unit": "Output Variable Unit (output_unit)",
    "output_unit_help": "Physical unit of output variable",
    "input_variable_config": "🔢 Input Variable Configuration",
    "feature_config_desc": "Configure variable information for {count} input features:",
    "feature_label": "Feature {index}:",
    "variable_name": "Variable Name (variable_names[{index}])",
    "var_name_help": "Symbol name of the {index}th input variable",
    "variable_unit": "Unit (variable_units[{index}])",
    "var_unit_help": "Physical unit of the {index}th input variable",
    "variable_desc": "Description (variable_description[{name}])",
    "var_desc_help": "Physical meaning of the {index}th input variable",
    "advanced_options": "🔬 Advanced Options",
    "enable_unit_validation": "Enable Unit Validation (auto_describe = True)",
    "unit_validation_help": "Enable dimensional analysis to ensure generated expressions are physically correct",
    "config_summary": "📋 Current Configuration Summary",
    "input_variables": "**Input Variables (variable_names, variable_units, variable_description):**",
    "output_variables": "**Output Variable:**",
    "other_config": "**Other Configuration:**",
    "input_desc_summary": "Input Description: {description}",
    "unit_validation_summary": "Unit Validation: {status}",
    "enabled": "Enabled",
    "disabled": "Disabled"
  },
  "fitting": {
    "control_title": "🚀 Fitting Control",
    "start_button": "▶️ Start Fitting",
    "warnings": {
      "fill_output_name": "⚠️ Please fill in output variable name",
      "fill_variable_names": "⚠️ Please configure variable names for all features",
      "fill_units": "⚠️ When unit validation is enabled, please configure units for all variables",
      "fill_output_unit": "⚠️ When unit validation is enabled, please fill in output variable unit",
      "select_models": "⚠️ Please select at least one model in sidebar",
      "select_functions": "⚠️ Please select at least one function in sidebar"
    },
    "initializing": "🔧 Initializing fitting engine...",
    "init_complete": "✅ Initialization complete, starting fitting...",
    "cycle_progress": "🔄 Cycle {current}/{total} in progress...",
    "target_reached": "🎯 Target score {score} reached!",
    "fitting_complete": "✨ Fitting complete! Final score: {score:.4f}",
    "completed": "Completed"
  },
  "progress": {
    "title": "📊 Fitting Progress",
    "current_cycle": "Current Cycle",
    "best_score": "Best Score",
    "api_calls": "API Calls",
    "elapsed_time": "Elapsed Time",
    "progress_text": "Progress: {progress:.1f}% ({current}/{total} cycles)",
    "avg_per_cycle": "Avg {avg:.1f}/cycle",
    "remaining_time": "Est. remaining {time:.1f}s"
  },
  "api_progress": {
    "title": "🔄 API Call Progress - {status}",
    "running": "Running...",
    "completed": "Completed",
    "current_cycle": "📊 Current Cycle: {current}/{total}",
    "api_calls_count": "📡 API Calls: {count}",
    "waiting": "⏳ Please wait, model is thinking...",
    "processing_complete": "🎉 Processing complete!",
    "progress_text": "Overall Progress: {progress:.1f}%",
    "current_best": "🎯 Current Best Result",
    "best_score_label": "Best Score",
    "current_cycle_update": "Current cycle update",
    "waiting_result": "Waiting for fitting result..."
  },
  "results": {
    "comparison_title": "📈 Fitting Result Comparison",
    "comparison_chart_title": "Original Curve vs Fitted Curve",
    "original_data": "Original Data",
    "fitted_result": "Fitted Result",
    "x_axis": "x",
    "y_axis": "y",
    "fitting_expression": "🔢 Fitting Expression",
    "mse": "Mean Squared Error (MSE)",
    "rmse": "Root Mean Squared Error (RMSE)",
    "mae": "Mean Absolute Error (MAE)",
    "final_result_title": "Final Fitting Result: Prediction vs Actual (Score: {score:.4f})",
    "actual_value": "Actual Value",
    "predicted_value": "Predicted Value",
    "ideal_fit": "Ideal Fit",
    "prediction_vs_actual": "Prediction vs Actual",
    "error_bars": "Error"
  },
  "api_calls": {
    "title": "📝 Model Call Log",
    "no_records": "No call records",
    "sequence": "Sequence",
    "cycle": "Cycle",
    "model": "Model",
    "expression_status": "Expression Status",
    "fitting_score": "Fitting Score",
    "call_count": "Call Count",
    "timestamp": "Timestamp",
    "cycle_format": "Round {cycle}",
    "status_legend": "💡 Status Legend",
    "status_success": "**✅ Successfully Found Expression**",
    "status_success_desc": "Valid fitting expression found",
    "status_searching": "**⏳ Searching**",
    "status_searching_desc": "Searching, no valid expression generated yet",
    "status_exploring": "**🔍 Exploring**",
    "status_exploring_desc": "Model is exploring different expressions",
    "call_statistics": "📈 Call Statistics",
    "model_usage": "**Model Usage Count:**",
    "task_status": "**Task Status Statistics:**",
    "status_success_count": "✅ Successfully generated expression",
    "status_searching_count": "⏳ Searching",
    "status_exploring_count": "🔍 Exploring",
    "unknown_status": "Unknown status ({status})",
    "score_distribution": "**Score Distribution:**",
    "avg_score": "Average Score: {score:.4f}",
    "max_score": "Max Score: {score:.4f}",
    "min_score": "Min Score: {score:.4f}",
    "valid_scores": "Valid score records: {valid}/{total}",
    "no_valid_scores": "No valid scores yet",
    "total_records": "Total records: {count}",
    "api_efficiency": "**API Call Efficiency:**",
    "total_api_calls": "Total API calls: {count}",
    "avg_calls_per_cycle": "Avg calls per cycle: {avg:.1f}",
    "calculating": "Calculating call statistics..."
  },
  "pareto": {
    "title": "🎯 Pareto Frontier",
    "no_data": "No Pareto frontier data",
    "chart_title": "Complexity vs Score (Pareto Frontier)",
    "complexity": "Expression Complexity",
    "score": "Fitting Score",
    "hover_complexity": "<b>Complexity:</b> %{x}",
    "hover_score": "<b>Score:</b> %{y:.2f}",
    "hover_expression": "<b>Expression:</b> %{text}",
    "detail_data": "📋 View Detailed Data",
    "complexity_col": "Complexity",
    "score_col": "Score",
    "expression_col": "Expression",
    "created_time": "Created Time"
  },
  "score_history": {
    "title": "📉 Fitting History",
    "score_calculation": "ℹ️ Score Calculation Description",
    "calculation_formula": "**Score Calculation Formula:**",
    "formula": "Score = 80 - 60 × (mse / linear_mse)",
    "formula_desc": "Where:",
    "mse_desc": "`mse`: Mean squared error of current model",
    "linear_mse_desc": "`linear_mse`: Mean squared error of linear fit (baseline)",
    "no_history": "No history data",
    "chart_title": "Best Score vs Cycle",
    "cycle_axis": "Cycle Number",
    "score_axis": "Best Score",
    "best_score": "Best Score"
  },
  "logs": {
    "realtime_log": "📝 Real-time Log",
    "api_call_log": "📞 API Call Log"
  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "warning": "Warning",
    "info": "Info",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "close": "Close",
    "save": "Save",
    "reset": "Reset",
    "delete": "Delete",
    "edit": "Edit",
    "view": "View",
    "download": "Download",
    "upload": "Upload",
    "search": "Search",
    "clear": "Clear",
    "refresh": "Refresh",
    "settings": "Settings",
    "help": "Help",
    "about": "About"
  }
}
